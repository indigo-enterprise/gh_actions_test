name: .NET Core Desktop Tests

on:
  # push:
  #   branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  # group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate-branch:
    runs-on: ubuntu-latest
    steps:
      - name: Check source branch
        run: |
          SOURCE_BRANCH="${{ github.head_ref }}"
          if [[ ! "$SOURCE_BRANCH" =~ ^release/[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå Only branches matching 'release/x.y.z' can be merged into master."
            exit 1
          fi

  unit-test:
    needs: validate-branch
    runs-on: windows-latest

    env:
      Solution_Name: Indigo.Core.PackageTest.sln                         # Replace with your solution name, i.e. MyWpfApp.sln.
      Test_Project_Path: Indigo.Core.PackageTest.Test/Indigo.Core.PackageTest.Test.csproj                # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
      Project_Path: Indigo.Core.PackageTest/Indigo.Core.PackageTest.csproj
      NuGet_Package_Version: 0.0.1
      AZURE_ARTIFACTS_FEED_URL: https://pkgs.dev.azure.com/IndigoVie/Infinity/_packaging/InfinityNugetFeed/nuget/v3/index.json
      NUGET_API_KEY: 5gtCxdaaGI0YrgIOuEv5Mc98BqTYXcbv252ayCx4TiKXaMh92dYtJQQJ99BBACAAAAADYMjaAAASAZDO1KRf # ${{ secrets.NUGET_API_KEY }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x
        source-url: ${{ env.AZURE_ARTIFACTS_FEED_URL }}
      env: 
        NUGET_AUTH_TOKEN: ${{ env.NUGET_API_KEY }} # ${{ secrets.AZURE_DEVOPS_TOKEN }} 

    - name: Restore dependencies
      run: dotnet restore ${{ env.Solution_Name }}

    - name: Build solution
      run: dotnet build ${{ env.Solution_Name }} -c Release --no-restore

    - name: Run unit tests
      run: dotnet test ${{ env.Test_Project_Path }} -c Release --no-build --verbosity normal
      
    # - name: Pack the application
    #   run: dotnet pack ${{ env.Project_Path }} -c Release --output ./nupkgs /p:PackageVersion=${{ env.NuGet_Package_Version }}

    # - name: Folder content
    #   run: cd nupkgs && ls

    # - name: Push to NuGet
    #   # run: dotnet nuget push --api-key AzureArtifacts ./nupkgs/*.nupkg
    #   run: dotnet nuget push ./nupkgs/Indigo.Core.PackageTest.0.0.1.nupkg --source ${{ env.AZURE_ARTIFACTS_FEED_URL }} --api-key ${{ env.NUGET_API_KEY }} --skip-duplicate



# 5gtCxdaaGI0YrgIOuEv5Mc98BqTYXcbv252ayCx4TiKXaMh92dYtJQQJ99BBACAAAAADYMjaAAASAZDO1KRf
# dotnet build Indigo.Core.PackageTest.sln -c Release --no-restore
# dotnet pack "Indigo.Core.PackageTest/Indigo.Core.PackageTest.csproj" -c Release --output ./nupkgs /p:PackageVersion=0.0.1
# dotnet nuget push ./nupkgs/*.nupkg --source https://pkgs.dev.azure.com/IndigoVie/_packaging/IndigoVie/nuget/v3/index.json --api-key az --skip-duplicate





# With Azure Login

# name: .NET Core Desktop Tests

# on:
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]

# concurrency:
#   group: ci-${{ github.ref }}
#   cancel-in-progress: true

# permissions:
#   id-token: write
#   contents: read

# jobs:
#   test:
#     runs-on: windows-latest
#     environment: TEST

#     env:
#       Solution_Name: Indigo.Core.PackageTest.sln                         # Replace with your solution name, i.e. MyWpfApp.sln.
#       Test_Project_Path: Indigo.Core.PackageTest.Test/Indigo.Core.PackageTest.Test.csproj                # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
#       Project_Path: Indigo.Core.PackageTest/Indigo.Core.PackageTest.csproj
#       NuGet_Package_Version: 0.0.1
#       AZURE_ARTIFACTS_FEED_URL: https://pkgs.dev.azure.com/IndigoVie/Infinity/_packaging/InfinityNugetFeed/nuget/v3/index.json
#       NUGET_API_KEY: 5gtCxdaaGI0YrgIOuEv5Mc98BqTYXcbv252ayCx4TiKXaMh92dYtJQQJ99BBACAAAAADYMjaAAASAZDO1KRf # ${{ secrets.NUGET_API_KEY }}

#     steps:
#     - name: Checkout
#       uses: actions/checkout@v4
#       with:
#         fetch-depth: 0

#     - name: Login to Azure
#       uses: azure/login@v1
#       with:
#         client-id: ${{ secrets.AZURE_CLIENT_ID }}
#         tenant-id: ${{ secrets.AZURE_TENANT_ID }}
#         subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

#     - name: Install .NET Core
#       uses: actions/setup-dotnet@v4
#       with:
#         dotnet-version: 9.0.x
#         source-url: ${{ env.AZURE_ARTIFACTS_FEED_URL }}
#       env: 
#         NUGET_AUTH_TOKEN: ${{ env.NUGET_API_KEY }} # ${{ secrets.AZURE_DEVOPS_TOKEN }} 

#     - name: Restore dependencies
#       run: dotnet restore ${{ env.Solution_Name }}

#     - name: Build solution
#       run: dotnet build ${{ env.Solution_Name }} -c Release --no-restore

#     - name: Run unit tests
#       run: dotnet test ${{ env.Test_Project_Path }} -c Release --no-build --verbosity normal
      
#     - name: Pack the application
#       run: dotnet pack ${{ env.Project_Path }} -c Release --output ./nupkgs /p:PackageVersion=${{ env.NuGet_Package_Version }}

#     - name: Folder content
#       run: cd nupkgs && ls

#     - name: Push to NuGet
#       # run: dotnet nuget push --api-key AzureArtifacts ./nupkgs/*.nupkg
#       run: dotnet nuget push ./nupkgs/Indigo.Core.PackageTest.0.0.1.nupkg --source ${{ env.AZURE_ARTIFACTS_FEED_URL }} --api-key ${{ env.NUGET_API_KEY }} --skip-duplicate



#       # repo:indigo-enterprise/gh_actions_test:environment:TEST
#       # repo:indigo-enterprise/gh_actions_test:pull_request



# name: .NET Core Desktop

# on:
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]

# concurrency:
#   # group: ${{ github.workflow }}-${{ github.ref }}
#   group: ci-${{ github.ref }}
#   cancel-in-progress: true

# jobs:
#   build:
#     strategy:
#       matrix:
#         configuration: [Debug, Release]

#     runs-on: windows-latest  # For a list of available runner types, refer to
#                              # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

#     env:
#       Solution_Name: your-solution-name                         # Replace with your solution name, i.e. MyWpfApp.sln.
#       Test_Project_Path: your-test-project-path                 # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
#       Wap_Project_Directory: your-wap-project-directory-name    # Replace with the Wap project directory relative to the solution, i.e. MyWpfApp.Package.
#       Wap_Project_Path: your-wap-project-path                   # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.

#     steps:
#     - name: Checkout
#       uses: actions/checkout@v4
#       with:
#         fetch-depth: 0

#     - name: Folder content
#       run: ls

#     # Install the .NET Core workload
#     - name: Install .NET Core
#       uses: actions/setup-dotnet@v4
#       with:
#         dotnet-version: 9.0.x

#     - name: Cache .NET packages
#       uses: actions/cache@v3
#       with:
#         path: ~/.nuget/packages
#         key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
#         restore-keys: |
#           ${{ runner.os }}-nuget-

#     # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
#     - name: Setup MSBuild.exe
#       uses: microsoft/setup-msbuild@v2

#     # Execute all unit tests in the solution
#     - name: Execute unit tests
#       run: dotnet test Indigo.Core.PackageTest.Test

#     # Restore the application to populate the obj folder with RuntimeIdentifiers
#     - name: Restore the application
#       run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
#       env:
#         Configuration: ${{ matrix.configuration }}

#     # Decode the base 64 encoded pfx and save the Signing_Certificate
#     - name: Decode the pfx
#       run: |
#         $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
#         $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
#         [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

#     # Create the app package by building and packaging the Windows Application Packaging project
#     - name: Create the app package
#       run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
#       env:
#         Appx_Bundle: Always
#         Appx_Bundle_Platforms: x86|x64
#         Appx_Package_Build_Mode: StoreUpload
#         Configuration: ${{ matrix.configuration }}

#     # Remove the pfx
#     - name: Remove the pfx
#       run: Remove-Item -path $env:Wap_Project_Directory\GitHubActionsWorkflow.pfx

#     # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
#     - name: Upload build artifacts
#       uses: actions/upload-artifact@v4
#       with:
#         name: MSIX Package
#         path: ${{ env.Wap_Project_Directory }}\AppPackages
